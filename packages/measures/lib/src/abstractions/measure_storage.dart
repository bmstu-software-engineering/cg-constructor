import 'dart:async';

import 'measure_result.dart';

/// Абстрактный класс для хранения результатов замеров производительности.
///
/// Этот класс определяет интерфейс для сохранения, получения и управления
/// результатами замеров производительности.
abstract class MeasureStorage {
  /// Сохраняет результат замера.
  ///
  /// [result] - результат замера для сохранения.
  ///
  /// Возвращает [Future], который завершается, когда результат сохранен.
  Future<void> saveResult(MeasureResult result);

  /// Получает результат замера по ключу.
  ///
  /// [key] - ключ замера.
  ///
  /// Возвращает [Future] с результатом замера [MeasureResult] или null,
  /// если результат с указанным ключом не найден.
  Future<MeasureResult?> getResult(String key);

  /// Получает все сохраненные результаты замеров.
  ///
  /// Возвращает [Future] со списком всех сохраненных результатов замеров.
  Future<List<MeasureResult>> getAllResults();

  /// Удаляет результат замера по ключу.
  ///
  /// [key] - ключ замера.
  ///
  /// Возвращает [Future] с булевым значением, указывающим, был ли удален результат.
  Future<bool> removeResult(String key);

  /// Очищает все сохраненные результаты замеров.
  ///
  /// Возвращает [Future], который завершается, когда все результаты удалены.
  Future<void> clearResults();

  /// Поток, который отправляет обновления при изменении результатов замеров.
  ///
  /// Подписчики получают обновленный список результатов в реальном времени.
  Stream<List<MeasureResult>> get resultsStream;
}
